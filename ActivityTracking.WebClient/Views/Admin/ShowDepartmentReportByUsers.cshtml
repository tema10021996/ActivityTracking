@model ActivityTracking.WebClient.Models.ManagerShowDepartmentOrTeamReportByUsersViewModel
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

}


<script>
    var colorArray = JSON.parse('@ViewBag.Colors');
</script>
<div class="panel panel-default">
    <div class="panel-heading">
        <div class="text-right">
            @using (Html.BeginForm("FindUserReport", "Admin"))
            {
                <div class="input-group">
                    @Html.Hidden("returnUrl", Request.Url.PathAndQuery)
                    @Html.TextBox("userName", null, new { @class = "form-control", placeholder = "Search user by login", style = "width:200px" })
                    <div class="input-group-btn">
                        <button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button>
                    </div>
                </div>
            }
        </div>

        @using (Html.BeginForm("ShowDepartmentReportByUsersWithValidation", "Admin"))
        {
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="text-center">
                    <p><h4><b>@Model.ChosenDepartmentOrTeamName</b></h4></p>
                    @Html.Hidden("departmentName", Model.ChosenDepartmentOrTeamName)
                    @{
                        string startMonth = null;
                        string startDay = null;
                        if (Model.Start.Month < 10)
                        {
                            startMonth = "0" + Model.Start.Month;
                        }
                        else
                        {
                            startMonth = Model.Start.Month.ToString();
                        }
                        if (Model.Start.Day < 10)
                        {
                            startDay = "0" + Model.Start.Day;
                        }
                        else
                        {
                            startDay = Model.Start.Day.ToString();
                        }
                        string startValue = Model.Start.Year + "-" + startMonth + "-" + startDay;

                    }
                    @{
                        string endMonth = null;
                        string endDay = null;
                        if (Model.End.Month < 10)
                        {
                            endMonth = "0" + Model.End.Month;
                        }
                        else
                        {
                            endMonth = Model.End.Month.ToString();
                        }
                        if (Model.End.Day < 10)
                        {
                            endDay = "0" + Model.End.Day;
                        }
                        else
                        {
                            endDay = Model.End.Day.ToString();
                        }
                        string endValue = Model.Start.Year + "-" + endMonth + "-" + endDay;

                    }
                    @Html.LabelFor(model => model.Start)

                    <input type="date" name="Start" id="Start" class="Myform-control" value="@startValue" onchange="ChangeStyle()">

                    @Html.LabelFor(model => model.End)

                    <input type="date" name="End" id="End" class="Myform-control" value="@endValue">

                    <button type="submit" class="btn btn-primary btn-sm">Apply</button>
                </div>
            </div>

                        }
    </div>
    @{
        bool isEmptyModel = true;
        foreach (var workerInfo in Model.WorkersInfos)
        {
            foreach (var reasonInfo in workerInfo.ReasonInfos)
            {
                if (reasonInfo.DurationInHours != 0.0)
                {
                    isEmptyModel = false;
                }
            }
        }
    }
    @if (isEmptyModel == false)
    {
        <div id="barchart_values"></div>
        <hr>
        <div id="departmentReport"></div>

    }
    else
    {
        <div class="text-center">
            <br>
            <br>
            <p><h4><b>There are no data for this period</b></h4></p>
        </div>
    }


    <script type="text/javascript">
        google.charts.load("current", { packages: ["corechart"] });
        google.charts.setOnLoadCallback(drawChart);
        function drawChart() {
            var dataTable = new google.visualization.DataTable();

            dataTable.addColumn({ type: 'string', id: 'UserName' });

            @foreach(var reasonName in Model.ReasonsNames)
        {
            <text>
            dataTable.addColumn({ type: 'number', label: '@reasonName' });
            dataTable.addColumn({ type: 'string', role: 'tooltip', p: { 'html': true } });
            </text>
        }

            @foreach (var WorkerInfo in Model.WorkersInfos)
        {

            <text>
            var arr = [];
            arr.push('@WorkerInfo.Name');
            </text>

            foreach (var reasonInfo in WorkerInfo.ReasonInfos)
            {
                if (reasonInfo.DurationInHours == 0.0)
                {
                    <text>
            arr.push(0);
            arr.push(createCustomHTMLContent('@WorkerInfo.Name', '@reasonInfo.ReasonName', '0', '0', '0', '0'));
            </text>
                }
                else
                {
                <text>
            var d = '@reasonInfo.DurationInHours';
            var c = d.replace(',', '.');
            var a = Number(c);
            arr.push(a);
            arr.push(createCustomHTMLContent('@WorkerInfo.Name', '@reasonInfo.ReasonName', '@reasonInfo.DurationInHours', '@reasonInfo.Hours', '@reasonInfo.Minutes', '@reasonInfo.Seconds'));
            </text>
                }
            }
            <text>
            dataTable.addRow(arr);
            </text>

        }
            var options = {
                isStacked: 'percent',
                legend:  {position: 'top', textStyle: {fontSize: 16} },
                hAxis: {
                    minValue: 0,
                    ticks: [0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1]
                },
                colors: colorArray,
                tooltip: { isHtml: true },
                height: @Model.WorkersInfos.Count*50,
                chartArea: {top: 50, left:150, width: 900}
            };

            var chart = new google.visualization.BarChart(document.getElementById("barchart_values"));
            chart.draw(dataTable, options);
        }

    </script>

    <script type="text/javascript">
        google.charts.load("current", { packages: ["corechart"] });
        google.charts.setOnLoadCallback(drawChart);
        function drawChart() {
            var dataTable = new google.visualization.DataTable();

            dataTable.addColumn({ type: 'string', id: 'TeamName' });

            @foreach(var reasonName in Model.ReasonsNames)
        {
            <text>
            dataTable.addColumn({ type: 'number', label: '@reasonName' });
            dataTable.addColumn({ type: 'string', role: 'tooltip', p: { 'html': true } });
            </text>
        }


            var arr = [];
            arr.push('');

            @foreach (var reasonInfo in Model.ReasonInfosForPercentageReport)
            {
                if (reasonInfo.DurationInHours == 0.0)
                {
                    <text>
            arr.push(0);
            arr.push(createCustomHTMLContent('@Model.ChosenDepartmentOrTeamName', '@reasonInfo.ReasonName', '0', '0', '0', '0'));
            </text>
                }
                else
                {
                <text>
            var d = '@reasonInfo.DurationInHours';
            var c = d.replace(',', '.');
            var a = Number(c);
            arr.push(a);
            arr.push(createCustomHTMLContent('@Model.ChosenDepartmentOrTeamName', '@reasonInfo.ReasonName', '@reasonInfo.DurationInHours', '@reasonInfo.Hours', '@reasonInfo.Minutes', '@reasonInfo.Seconds'));
            </text>
                }
            }

            dataTable.addRow(arr);

            var options = {
                isStacked: 'percent',
                legend:  {position: 'top', textStyle: {fontSize: 16} },
                hAxis: {
                    minValue: 0,
                    ticks: [0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1]
                },
                colors: colorArray,
                tooltip: { isHtml: true },
                @*height: @Model.WorkersInfos.Count*50,*@
                chartArea: { top: 50, left: 150, width:900 },
            };

            var chart = new google.visualization.BarChart(document.getElementById("departmentReport"));
            chart.draw(dataTable, options);
        }
    </script>
    <script>
        function createCustomHTMLContent(userName, reasonName, durationInHours, hours, minutes, seconds) {
            return '<div style="padding:20px; width:375px;">' + '<b>' + userName + '</b>' + '<hr>' + '<b>' + 'Reason: ' + '</b>' + reasonName + '<br>' +
               '<b>' + 'Duration in hours: ' + '</b>' + durationInHours + 'h' + '<br>' +
               '<b>' + 'Duration: ' + '</b>' + hours + 'hours' + ', ' + minutes + 'minutes' + ', ' + seconds + 'seconds' + '</div>';
        }
    </script>
</div>
<script type="text/javascript">
function ChangeStyle()
{
    var startDate = document.getElementById("Start").value;

    var endDate = new Date(startDate);
    endDate.setDate(endDate.getDate()+7);
    document.getElementById("End").valueAsDate = endDate;
}
</script>