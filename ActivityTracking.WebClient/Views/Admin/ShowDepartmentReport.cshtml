@model ActivityTracking.WebClient.Models.ManagerShowDepartmentOrTeamReportViewModel
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

}
<div class="panel panel-default">
    <div class="panel-heading">
        <div class="text-right">
            @using (Html.BeginForm("FindUserReport", "Admin"))
            {
                <div class="input-group">
                    @Html.Hidden("returnUrl", Request.Url.PathAndQuery)
                    @Html.TextBox("userName", null, new { @class = "form-control", placeholder = "Search user by login", style = "width:200px" })
                    <div class="input-group-btn">
                        <button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button>
                    </div>
                </div>
            }
        </div>

        @using (Html.BeginForm("ShowDepartmentReportWithValidation", "Admin"))
            {
            @Html.ValidationSummary(true)

            <div class="row">
                <div class="col-md-10 col-lg-10">
                    <div class="text-center">
                        <p><h4><b>@Model.ChosenDepartmentOrTeamName</b></h4></p>
                        @Html.Hidden("DepartmentList", Model.ChosenDepartmentOrTeamName)

                        @Html.Hidden("PieChart", Model.PieChart)
                        @Html.Hidden("BarChart", Model.BarChart)
                        @Html.Hidden("ColumnChart", Model.ColumnChart)

                        @{
                            string startMonth = null;
                            string startDay = null;
                            if (Model.Start.Month < 10)
                            {
                                startMonth = "0" + Model.Start.Month;
                            }
                            else
                            {
                                startMonth = Model.Start.Month.ToString();
                            }
                            if (Model.Start.Day < 10)
                            {
                                startDay = "0" + Model.Start.Day;
                            }
                            else
                            {
                                startDay = Model.Start.Day.ToString();
                            }
                            string startValue = Model.Start.Year + "-" + startMonth + "-" + startDay;

                        }
                        @{
                            string endMonth = null;
                            string endDay = null;
                            if (Model.End.Month < 10)
                            {
                                endMonth = "0" + Model.End.Month;
                            }
                            else
                            {
                                endMonth = Model.End.Month.ToString();
                            }
                            if (Model.End.Day < 10)
                            {
                                endDay = "0" + Model.End.Day;
                            }
                            else
                            {
                                endDay = Model.End.Day.ToString();
                            }
                            string endValue = Model.Start.Year + "-" + endMonth + "-" + endDay;

                        }
                        @Html.LabelFor(model => model.Start)

                        <input type="date" name="Start" id="Start" class="Myform-control" value="@startValue" onchange="ChangeStyle()">

                        @Html.LabelFor(model => model.End)

                        <input type="date" name="End" id="End" class="Myform-control" value="@endValue">

                        <button type="submit" class="btn btn-primary btn-sm">Apply</button>
                    </div>
                </div>
            </div>
                            }
    </div>

    <div class="row">
        @{
            bool isEmptyModel = true;
            foreach (var reasonInfo in Model.ReasonInfos)
            {
                if (reasonInfo.DurationInHours != 0.0)
                {
                    isEmptyModel = false;
                }
            }
        }
        @if (isEmptyModel == false)
            {
            <div class="col-md-10 col-lg-10">
                @if (Model.BarChart == true)
                {
                    <div id="barchart_values"></div>
                        <div id="piechart" style="display:none"></div>
                        <div id="columnchart_values" style="display:none"></div>

                }
                else if (Model.PieChart == true)
                {
                    <div id="piechart" style="width: 900px; height: 400px;"></div>
                        <div id="barchart_values" style="display:none"></div>
                        <div id="columnchart_values" style="display:none;"></div>
                }
                else
                {

                    <div id="piechart" style="display:none;"></div>
                        <div id="barchart_values" style="display:none"></div>
                        <div id="columnchart_values"></div>

                }
            </div>
        }
        else
        {
            <div class="col-md-10 col-lg-10 text-center">
                <br>
                <br>
                <p><h4><b>There are no data for this period</b></h4></p>
            </div>
        }

        <div class="text-right col-md-2 col-lg-2">
            @using (Html.BeginForm(new { Start = Model.Start, End = Model.End, BarChart = true, PieChart = false, ColumnChart = false, DepartmentList = Model.ChosenDepartmentOrTeamName }))
            {
                <button type="submit" style="padding:0px; margin:3px; border:none">
                    <image src="~/Content/BarChart.png">
                </button>
            }
            @using (Html.BeginForm(new { Start = Model.Start, End = Model.End, BarChart = false, PieChart = true, ColumnChart = false, DepartmentList = Model.ChosenDepartmentOrTeamName }))
            {
                <button type="submit" style="padding:0px; margin:3px; border:none">
                    <image src="~/Content/PieChart.png">
                </button>
            }
            @using (Html.BeginForm(new { Start = Model.Start, End = Model.End, BarChart = false, PieChart = false, ColumnChart = true, DepartmentList = Model.ChosenDepartmentOrTeamName }))
            {
                <button type="submit" style="padding:0px; margin:3px; border:none">
                    <image src="~/Content/ColumnChart.png">
                </button>
            }
        </div>

    </div>
</div>

<script>
    var colorArray = JSON.parse('@ViewBag.Colors');
</script>

<script type="text/javascript">
    google.charts.load("current", {packages:['corechart']});
    google.charts.setOnLoadCallback(drawChart);
    function drawChart() {
        var dataTable = new google.visualization.DataTable();

        dataTable.addColumn({ type: 'string', id: 'DepartmentName' });
        dataTable.addColumn({ type: 'number', label: 'ReasonName' });
        dataTable.addColumn({ type: 'string', role: 'style'});
        dataTable.addColumn({ type: 'string', role: 'tooltip', p: { 'html': true } });



        @foreach (var reasonInfo in Model.ReasonInfos)
        {
            <text>
    var arr = [];
            arr.push('@reasonInfo.ReasonName');
            </text>

            if (reasonInfo.DurationInHours == 0.0)
            {
                <text>
        arr.push(0);
        arr.push('@reasonInfo.Color');
                arr.push(createCustomHTMLContent('@Model.ChosenDepartmentOrTeamName', '@reasonInfo.ReasonName', '0', '0', '0', '0'));
                </text>
            }
            else
            {
                <text>
        var d = '@reasonInfo.DurationInHours';
                var c = d.replace(',', '.');
                var a = Number(c);
                arr.push(a);
                arr.push('@reasonInfo.Color');
                arr.push(createCustomHTMLContent('@Model.ChosenDepartmentOrTeamName', '@reasonInfo.ReasonName', '@reasonInfo.DurationInHours', '@reasonInfo.Hours', '@reasonInfo.Minutes', '@reasonInfo.Seconds'));
                </text>
            }
            <text>
        dataTable.addRow(arr);
            </text>
        }

        var colorArray14 = JSON.parse('@ViewBag.Colors');
        var options = {
        width: 900,
        height: 400,
        bar: { groupWidth: "75%" },
        legend: { position: 'none' },
        tooltip: { isHtml: true },
        chartArea: { left: 100, top: 20, width:900}
      };
      var chart = new google.visualization.ColumnChart(document.getElementById("columnchart_values"));
      chart.draw(dataTable, options);
  }
</script>



<script type="text/javascript">
    google.charts.load('current', { 'packages': ['corechart'] });
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {

        var dataTable = new google.visualization.DataTable();

        dataTable.addColumn({ type: 'string', id: 'DepartmentName' });
        dataTable.addColumn({ type: 'number', label: 'ReasonName' });
        dataTable.addColumn({ type: 'string', role: 'tooltip', p: { 'html': true } });



        @foreach (var reasonInfo in Model.ReasonInfos)
            {
                <text>
        var arr = [];
        arr.push('@reasonInfo.ReasonName');
        </text>

                if (reasonInfo.DurationInHours == 0.0)
                {
                    <text>
        arr.push(0);
        arr.push(createCustomHTMLContent('@Model.ChosenDepartmentOrTeamName', '@reasonInfo.ReasonName', '0', '0', '0', '0'));
        </text>
                }
                else
                {
                <text>
        var d = '@reasonInfo.DurationInHours';
        var c = d.replace(',', '.');
        var a = Number(c);
        arr.push(a);
        arr.push(createCustomHTMLContent('@Model.ChosenDepartmentOrTeamName', '@reasonInfo.ReasonName', '@reasonInfo.DurationInHours', '@reasonInfo.Hours', '@reasonInfo.Minutes', '@reasonInfo.Seconds'));
        </text>
            }
            <text>
        dataTable.addRow(arr);
        </text>
        }
        var options = {
            colors: colorArray,
            tooltip: { isHtml: true },
            chartArea: { left: 50, top: 20, },
            legend: { position: 'left' }
        };


        var chart = new google.visualization.PieChart(document.getElementById('piechart'));

        chart.draw(dataTable, options);
    }
</script>



<script type="text/javascript">
    google.charts.load("current", { packages: ["corechart"] });
    google.charts.setOnLoadCallback(drawChart);
    function drawChart() {
        var dataTable = new google.visualization.DataTable();

        dataTable.addColumn({ type: 'string', id: 'DepartmentName' });

        @foreach(var reasonName in Model.ReasonsNames)
        {
            <text>
        dataTable.addColumn({ type: 'number', label: '@reasonName' });
        dataTable.addColumn({ type: 'string', role: 'tooltip', p: { 'html': true } });
        </text>
        }


        var arr = [];
        arr.push('');

        @foreach (var reasonInfo in Model.ReasonInfos)
            {
                if (reasonInfo.DurationInHours == 0.0)
                {
                    <text>
        arr.push(0);
        arr.push(createCustomHTMLContent('@Model.ChosenDepartmentOrTeamName', '@reasonInfo.ReasonName', '0', '0', '0', '0'));
        </text>
                }
                else
                {
                <text>
        var d = '@reasonInfo.DurationInHours';
        var c = d.replace(',', '.');
        var a = Number(c);
        arr.push(a);
        arr.push(createCustomHTMLContent('@Model.ChosenDepartmentOrTeamName', '@reasonInfo.ReasonName', '@reasonInfo.DurationInHours', '@reasonInfo.Hours', '@reasonInfo.Minutes', '@reasonInfo.Seconds'));
        </text>
                }
            }

        dataTable.addRow(arr);

        var options = {
            isStacked: 'percent',
            legend: { position: 'top', textStyle: { fontSize: 16 } },
            hAxis: {
                minValue: 0,
                ticks: [0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1]
            },
            colors: colorArray,
            tooltip: { isHtml: true },
            @*height: @Model.WorkersInfos.Count*50,*@
            chartArea: { top: 50, left: 100, width: 900 },
        };

        var chart = new google.visualization.BarChart(document.getElementById("barchart_values"));
        chart.draw(dataTable, options);
    }
    function createCustomHTMLContent(departmentName, reasonName, durationInHours, hours, minutes, seconds) {
        return '<div style="padding:20px; width:375px;">' + '<b>' + departmentName + '</b>' + '<hr>' + '<b>' + 'Reason: ' + '</b>' + reasonName + '<br>' +
           '<b>' + 'Duration in hours: ' + '</b>' + durationInHours + 'h' + '<br>' +
           '<b>' + 'Duration: ' + '</b>' + hours + 'hours' + ', ' + minutes + 'minutes' + ', ' + seconds + 'seconds' + '</div>';
    }
</script>
<script type="text/javascript">
function ChangeStyle()
{
    var startDate = document.getElementById("Start").value;

    var endDate = new Date(startDate);
    endDate.setDate(endDate.getDate()+7);
    document.getElementById("End").valueAsDate = endDate;
}
</script>



